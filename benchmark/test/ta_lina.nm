mdp

const int n = 2;

module basic

       b   : [0..pow(2,n)-1];      // secret input key
       ref : [0..pow(2,n-1)];      // reference value to test if-condition
       j   : [0..2*n];               // attacker counter
       l   : [0..1];                 // indicate whether instructions in if should be executed
       fin : [0..1];                 // indicate whether exponentiation thread finished

       [whileIfTrue] (l=0)&(ref>0)&(b>=ref)&(fin=0) -> 1 : (b'=b-ref)&(ref'=floor(ref/2))&(l'=1); // b(i)=1
       [whileIfFalse] (l=0)&(ref>0)&(b<ref)&(fin=0)  -> 1 : (ref'=floor(ref/2));                   // b(i)=0

       //[s3] (l=0)&(ref=1)&(b>=ref)&(fin=0) -> 1 : (b'=0)&(ref'=0)&(l'=1);  // b(i)=1
       //[s4] (l=0)&(ref=1)&(b<ref)&(fin=0)  -> 1 : (ref'=0);                // b(i)=0

       [insideIf] (l=1)&(fin=0) -> 1 : (l'=0);  // execute if-condition

       [whileloopfalse] (ref=0)&(fin=0)&(l=0) -> 1 : (fin'=1);
       [mexpdone] (fin=1) -> 1 : true ;         // loop forever after exponentiation thread finished

       [attacker] (j<2*n)&(fin=0) -> 1 : (j'=j+1);      // attacker thread


endmodule

init  (ref=pow(2,n-1))&(l=0)&(j=0)&(fin=0) endinit

label "fin"  = (fin=1);
label "loop" = (l=1);